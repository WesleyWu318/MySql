
* NOTE_RULES *

1. 大寫為 KEY WORD
2. (optional) => 此行非必要(可加可不加)

=================

* DATABASE_DEFINITION 資料庫定義 *

==================

CREATE DATABASE `database_name`; // 創建資料庫

SHOW DATABASES; // 顯示所有創建的資料庫(包含系統內建)

DROP DATABASE `database_name`;  // 刪除指定的資料庫

USE `database` // 現在要使用哪個資料庫做新增和修改

===================

* COMMEN_DATA_TYPES 基本資料結構 *

===================

INT          整數

DECIMAL(m,n) 浮點數 
  m => 總共位數, n => 小數點後位數
  Ex. DECIMAL(3,2) => 3.69
  
VARCHAR(n)   字串
  n => MAX_SIZE

BLOB         二進制檔案
  (Binary Large Object) 
  Ex. 圖片,影片,檔案
  
DATE         日期
  Ex. YYYY-MM-DD => 2021-03-18

TIMESTAMP    時間戳記
  Ex. YYYY-MM-DD HH-MM-SS
  =>  2020-10-10 17-20-59

===================

* TABLE 表格 *

===================

CREATE TABLE `student`( // 建立表格
  `student_id` INT PRIMARY KEY, // 加入表格屬性並設定為" PERIMARY KEY "(不會有重複的資料)
  `name` VARCHAR(20),  // 加入表格屬性
  `major` VARCHAR(20)  // 加入表格屬性
);

DESCRIBE `student`;   // 顯示指定表格的屬性
DROP TABLE `student`; // 刪除指定的表格

ALTER TABLE `student` ADD gpa(成績平均積點) DECIMAL(3,2); // 將指定表格加入新屬性
ALTER TABLE `student` DROP COLUMN gpa(成績平均積點);      // 將指定表格刪除指定屬性

===================

* INSERT 插入 *

===================

INSERT INTO `student` VALUES(1, "小明", NULL); // 將資料填入指定表格中 
  Ps. 屬性要對應加入表格時的順序
  
INSERT INTO `student`(`name`, `major`, `student_id`) VALUES("小紫", NULL, 4);  // 將資料填入指定表格中(已決定加入順序)
  Ps. NULL => 為空

===================

* CONSTRAINT 約束 *

===================

CREATE TABLE `student`(
    `student_id` INT AUTO_INCREMENT, // " AUTO_INCREMENT " 自動隨著加入順序加一，不須手動填入
    `name` VARCHAR(20) NOT NULL,   // " NOT NULL " 指定不能為NULL，如果填入為NULL會出錯
    `major` VARCHAR(20) UNIQUE,    // " UNIQUE " 指定不能有相同的值，如果重複的值會出錯
    `class` INT DEFAULT "202",     // " DEFAULT " 如果沒有填入會預設成指定內容
    PRIMARY KEY(`student_id`)
);

===================

* UPDATE & DELETE 更新與刪除 *

===================

UPDATE `student`  // 選定要進行更新的表格
SET `name` = '小灰' ,`major` = '社會'     // 設定更改後的資料，可設定多個
WHERE `student_id` = 1 OR `score` >= 60; // 設定更改的條件，可設定多個( 用 AND / OR 連接 ) (optional)
  條件:
      >=  大於等於   =  等於
      >   大於      <>  不等於
      <=  小於等於
      <   小於
  Ps. 可以沒有WHERE條件 => 代表整個表格全部更新
  
DELETE FROM `student`  // 選定要進行刪除的表格
WHERE `student_id` = 5 AND `score` <> 0; // 設定刪除的條件，可設定多個( 用 AND / OR 連接 ) (optional)
  條件:
      >=  大於等於   =  等於
      >   大於      <>  不等於
      <=  小於等於
      <   小於
  Ps. 可以沒有WHERE條件 => 代表整個表格全部更新
  
===================

* SELECT 取得資料 *

===================

SELECT 'name' / 'student_id' / *  // 選擇顯示哪一項屬性，或全部屬性(*)
  SELECT DISTINCT 'name' => 不會重複 (optional)
FROM `student`                    // 從哪個表格
WHERE `major`IN('歷史', '英文', '生物') // 設定選擇的條件 (optional)
  Ps. 等同於 WHERE `major` = '歷史' OR `major` = '英文' OR `major` = '生物'
ORDER BY `score` DESC; // 設定排序方式 (optional)
  DESC => descent下降(降序) 為預設
  ASC => ascent上升(升序)
LIMIT 2; // 限制資料個數 (optional)
  
===================

* AGGTRAGTE FUNCTIONS 聚合函數 *

===================

SELECT COUNT(*) FROM `employee`; // 顯示指定表格的資料總筆數

SELECT COUNT(`sup_id`) FROM `employee`; // 顯示指定表格有sup_id屬性的 (非NULL) 資料總筆數

SELECT COUNT(*)
FROM `employee`
WHERE `birth_date` > '1970-01-01' AND `sex` = 'F'; // 顯示指定表格中出生於1970-01-01之後的女性資料總筆數

SELECT AVG(`salary`) // 顯示指定表格中指定屬性的平均值
FROM `employee`;

SELECT SUM(`salary`) // 顯示指定表格中指定屬性的總和
FROM `employee`;

SELECT MAX(`salary`) // 顯示指定表格中指定屬性的最大值
FROM `employee`;

SELECT MIN(`salary`) // 顯示指定表格中指定屬性的最小值
FROM `employee`;
